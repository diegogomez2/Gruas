/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas2;

import controladores2.controladorAgendaDeOtrosPagos;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.event.RowSorterEvent;
import javax.swing.event.RowSorterListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author diego
 */
public class vistaAgendaDeOtrosPagosP extends javax.swing.JPanel {

    /**
     * Creates new form vistaAgendaDeOtrosPagosP
     */
    MyTableModel datos;
    DateFormat formatDate = new SimpleDateFormat("yyyy-MM-dd");
    NumberFormat FORMAT = NumberFormat.getCurrencyInstance();
    DecimalFormatSymbols dfs = new DecimalFormatSymbols();
    
    public vistaAgendaDeOtrosPagosP(String tipo, Object[][] data) {
        initComponents();
        dfs.setCurrencySymbol("$");
        dfs.setGroupingSeparator('.');
        dfs.setMonetaryDecimalSeparator('.');
        ((DecimalFormat) FORMAT).setDecimalFormatSymbols(dfs);
        String[] columNames = {"Medio de pago", "Asunto", "Rut proveedor", "Razón social", "Folio", 
            "Observaciones de pago", "N° de cheque/cuota", "Monto", "Fecha de pago", "Estado", "Id"};
        datos = new MyTableModel(data){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        tablaPagos.setModel(datos);
        /***ALINEAR IZQUIERA, NO FUNCIONA CON $***/
        
        
        //tablaPagos.setDefaultRenderer(String.class, centerRenderer);
        /************/
        //tablaPagos.getColumnModel().getColumn(7).setCellRenderer();
        TableColumnModel tcm = tablaPagos.getColumnModel();
        tcm.removeColumn(tcm.getColumn(9));
        tcm.removeColumn(tcm.getColumn(9));
        tablaPagos.setAutoCreateRowSorter(true);
        //tablaPagos.setDefaultRenderer(Object.class, new OwnTableCellRenderer());
        if(tablaPagos.getRowCount() > 0) tablaPagos.setRowSelectionInterval(0, 0);
        tablaPagos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tablaPagos.setDefaultRenderer(Object.class, new OwnTableCellRenderer());
        tablaPagos.setDefaultRenderer(Integer.class, new OwnTableCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPagos = new javax.swing.JTable(){

            //Implement table cell tool tips.
            public String getToolTipText(MouseEvent e) {
                String tip = null;
                java.awt.Point p = e.getPoint();
                int rowIndex = rowAtPoint(p);
                int colIndex = columnAtPoint(p);

                try {
                    tip = getValueAt(rowIndex, colIndex).toString();
                } catch (RuntimeException e1) {
                    //catch null pointer exception if mouse is over an empty line
                }

                return tip;
            }
        };
        botonCambiarEstado = new javax.swing.JButton();
        textoFiltro = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        botonActualizar = new javax.swing.JButton();

        tablaPagos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaPagos.setToolTipText("");
        tablaPagos.getTableHeader().setReorderingAllowed(false);
        tablaPagos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaPagos);

        botonCambiarEstado.setText("Cambiar estado de pago");
        botonCambiarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCambiarEstadoActionPerformed(evt);
            }
        });

        textoFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textoFiltroKeyReleased(evt);
            }
        });

        jLabel1.setText("Filtro");

        botonActualizar.setText("Actualizar");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botonCambiarEstado))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(botonActualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonCambiarEstado)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonCambiarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCambiarEstadoActionPerformed
        controladorAgendaDeOtrosPagos miControlador = new controladorAgendaDeOtrosPagos();
        boolean selected = tablaPagos.getSelectedRowCount() > 0;
        if(selected){
            int row = getFilaSeleccionada();
            String id = getIdFila(row);
            miControlador.irVistaCambiarEstado(id);
            JTabbedPane tabs = (JTabbedPane)this.getParent();
            miControlador.crearControladorPrincipal(tabs);
        }else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar una cuota para ser modificada");
        }
    }//GEN-LAST:event_botonCambiarEstadoActionPerformed

    private void textoFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoFiltroKeyReleased
        String query = textoFiltro.getText();
        filtrar(query);
    }//GEN-LAST:event_textoFiltroKeyReleased

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        controladorAgendaDeOtrosPagos miControlador = new controladorAgendaDeOtrosPagos();
        JTabbedPane tabs = (JTabbedPane)this.getParent();
        miControlador.crearControladorPrincipal(tabs);
    }//GEN-LAST:event_botonActualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonCambiarEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPagos;
    private javax.swing.JTextField textoFiltro;
    // End of variables declaration//GEN-END:variables

    public void filtrar(String query){
        TableRowSorter<MyTableModel> sorter = new TableRowSorter<>(datos);
        tablaPagos.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter("(?i)"+query));
    }   
    
    public int getFilaSeleccionada() {
        return tablaPagos.getSelectedRow();
    }
    
    public String getIdFila(int row){
        return tablaPagos.getModel().getValueAt(tablaPagos.convertRowIndexToModel(row), 10).toString();
    }
    
    public class CurrencyTableCellRenderer extends DefaultTableCellRenderer {
        @Override
        public final Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
                final Component result = super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, column);
                if (value instanceof Number) {
                    setHorizontalAlignment(JLabel.RIGHT);
                    setText(FORMAT.format(value));
                } else {
                    setText("");
                }
                return result;
            }
    }

    public class MyTableModel extends DefaultTableModel{
        public MyTableModel() {
          super(new String[]{"Medio de pago", "Asunto", "Rut proveedor", "Razón social", "Folio", 
            "Observaciones de pago", "N° de cheque/cuota", "Monto", "Fecha de pago", "Estado", "Id"}, 0);
        }
        public MyTableModel(Object[][] data){
            super(new String[]{"Medio de pago", "Asunto", "Rut proveedor", "Razón social", "Folio", 
            "Observaciones de pago", "N° de cheque/cuota", "Monto", "Fecha de pago", "Estado", "Id"}, 0);
            
            int i = 0;
            this.setRowCount(data.length);
            for(Object[] data1 : data){
                int monto = Integer.parseInt(data1[7].toString());
                this.setValueAt(data1[0], i, 0);
                this.setValueAt(data1[1], i, 1);
                this.setValueAt(data1[2], i, 2);
                this.setValueAt(data1[3], i, 3);
                this.setValueAt(data1[4], i, 4);
                this.setValueAt(data1[5], i, 5);
                this.setValueAt(data1[6], i, 6);
                this.setValueAt(monto, i, 7);
                this.setValueAt(data1[8], i, 8);
                this.setValueAt(data1[9], i, 9);
                this.setValueAt(data1[10], i, 10);
                i++;
        }
        }

        @Override
        public Class getColumnClass(int column) {
          switch (column) {
            case 7:
                return Integer.class;
            default:
                return String.class;
          }
        }
    }
    
    public class OwnTableCellRenderer extends DefaultTableCellRenderer {
        
    public OwnTableCellRenderer() {
        super();
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
            int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        setFont(getFont().deriveFont(Font.PLAIN));
        setHorizontalAlignment(SwingConstants.LEFT);
        setBackground(Color.white);
        setForeground(Color.black);
        String valor = table.getModel().getValueAt(table.convertRowIndexToModel(row),8).toString();
        Date fec;
        try{
            fec = formatDate.parse(valor);
        }catch(ParseException p){
            fec = new Date();
        }
        Date cur = new Date();
        long dias = Math.round((fec.getTime() - cur.getTime()) / (double) 86400000);
        if (dias <= 7) {
            setBackground(Color.ORANGE);
        }  else {
            setBackground(Color.white);
        }
        valor = table.getModel().getValueAt(table.convertRowIndexToModel(row), 9).toString();
        if(valor.compareTo("Pagado") == 0){
            setBackground(Color.GREEN);
        }
        if(isSelected){
            setBackground((new java.awt.Color(184,207,229)));
        }
        if(value instanceof Number){
            Number num = (Number)value;
            String text = FORMAT.format(num);
            setText(text);
        }else{
            setText(value != null ? value.toString() : "");
        }
        return this;
    }

}
}
